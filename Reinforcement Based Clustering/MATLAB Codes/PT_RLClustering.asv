%% This code implements the DA algorithm with p(k|j,i) transition prob.



%% Constructing Data Set 3




%% Constructing Data Set 5

idx = 1;
[X,K,T_P] = data_RLClustering(idx);


%% Setting for DA parameters

Tmin = 0.0005; alpha = 0.99; PERTURB = 0.0001; STOP = 1e-2;
T = 12; Px = (1/M)*ones(M,1); Y = repmat(Px'*X, [K,1]);
rho = Px;

T_P = zeros(K,K,M);
for j = 1 : K
    for k = 1 : K
        if j ~= k
            %T_P(k,j,:) = 1/(K*(K-1));
            T_P(k,j,:) = 1/K;
        end
    end
    %T_P(j,j,:) = (K-1)/K;
end


% Preallocate 3D matrix: p_l_given_ji(l, j, i)
% p_l_given_ji = zeros(K, K, M);
% 
% for j = 1:K
%     for i = 1:M
%         % Initialize unnormalized probabilities
%         probs = zeros(1, K);
%         for l = 1:K
%             if l == j
%                 probs(l) = rand * 0.6 + 0.6;  % Strong preference for l == j
%             else
%                 probs(l) = rand * 0.05;       % Small values for l â‰  j
%             end
%         end
% 
%         % Normalize to sum to 1
%         probs = probs / sum(probs);
% 
%         % Store in matrix
%         p_l_given_ji(:, j, i) = probs(:);
%     end
% end
% 
% T_P = p_l_given_ji;

beta_cr = 0;
v = VideoWriter('my_simulation_video_With_TP.mp4', 'Motion JPEG 2000');  % or 'Motion JPEG AVI'
v.FrameRate = 10;  % frames per second
open(v);
while T >= Tmin
    L_old = inf;
    while 1
        [D,D_Act] = distortion_RLClustering(X,Y,M,N,K,T_P);
        num = exp(-D/T);
        den = repmat(sum(num,2),[1 K]);
        P = num./den;
        Py = P'*Px;
        for l = 1:K
            T_slice = squeeze(T_P(l, :, :))';   
            W = (1/M) * P .* T_slice;           
            row_weights = sum(W, 2);            
            numerator = row_weights' * X;
            denominator = sum(row_weights);
            Y(l, :) = numerator / denominator;
        end
        Y = Y + PERTURB*rand(size(Y));
        if isnan(Y)
            pp = 1;
        end
        L = -T*Px'*log(sum(exp(-D/T),2));
        if(norm(L-L_old) < STOP)
            break;
        end
        L_old = L;
    end
    %T_cr = critical_beta(X, Y, K, M, T_P, P, rho);
    %T_cr = critical_beta_NewDelta(X, Y, K, M, T_P, P, rho);
    %fprintf('%d %d \n',T,T_cr);
    disp(T);
    T = T*alpha;
    %scatter(X(:,1),X(:,2),'.'); hold on;
    %scatter(Y(:,1),Y(:,2),'d','filled'); title(T); hold off;
    frame = getframe(gcf);       % gcf = current figure
    %writeVideo(v, frame);  
end
close(v);
